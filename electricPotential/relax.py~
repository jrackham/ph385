"""
John Rackham
Giordano 5.1

This program will use the relaxation method to determine the electric
potential of a prism geometry
"""
import numpy as np
import pylab as pyl

# genMesh generates the mesh, width1 is the conductor width, and width2
# handles the spacing on either side
def genMesh(width1, width2):
    num = width1 + 2 * width2
    mesh = np.zeros((num,num), float)
    for x in range(width2, num - width2):
        for y in range(width2, num - width2):
            mesh[x][y] = 1.0
            
    return mesh

# relaxMesh will iterate over the mesh and set each position to the average
# of the nearest neighbors. The function will stop and return the final mesh
# when the change in V for any given position is smaller than dV
def relaxMesh(width1, width2, dV, omega):
    mesh = genMesh(width1, width2)
    change = 1000.0;
    w = omega
    keepGoing = True
    numLoops = 0

    while (keepGoing):
        keepGoing = False
        for x in range(1,len(mesh)-1):
            for y in range(1, len(mesh)-1):
                prev = mesh[x,y]
                if ((x >= width2 and x < width2 + width1) and (y >= width2 and y < width2 + width1)):
                    mesh[x,y] = 100.0
                else:
                    mesh[x,y] = (1+w) / 4.0 * (mesh[x+1,y]+mesh[x-1,y]+mesh[x,y+1]+mesh[x,y-1]) - w * mesh[x,y]
                    change = abs(mesh[x,y] - prev)
                    if change > dV:
                        keepGoing = True
        
        numLoops += 1

    return mesh, numLoops

"""omega = [0, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95, 0.99]
conv = []

for o in omega:"""
mesh1, num = relaxMesh(30, 30, 0.001, 0.85)
    #conv.append(num)

# Plotting stuff
pyl.pcolormesh(mesh1)
#pyl.plot(omega, conv)
pyl.show()
